package com.basant.spring.yahoo.stock.api.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import com.basant.spring.yahoo.stock.api.dto.Headers;
import com.basant.spring.yahoo.stock.api.dto.StockDto;
import com.basant.spring.yahoo.stock.api.dto.StockHistory;
import com.basant.spring.yahoo.stock.api.service.StockService;

@Controller
public class StockController {

	@Autowired
	private StockService service;

	@GetMapping("/getStock")
	public String getStockDetails(@RequestParam("stockName") String stockName, Model model) throws Exception {
		StockDto stockDto = service.getStockInfo(stockName);
		List<StockDto> stockList = new ArrayList<>();
		stockList.add(stockDto);
		model.addAttribute("stockList", stockList);
		return "stock";
	}

	@GetMapping("/getHistory/{stockName}")
	public String getHistory(@PathVariable String stockName, Model model) throws Exception {
		List<Headers> headers = getHeaders();
		List<StockHistory> histories = service.getHistory(stockName, 0, null);
		model.addAttribute("msg", "Stock History up to today :");
		model.addAttribute("headers", headers);
		model.addAttribute("histories", histories);
		return "stock";
	}

	@GetMapping("/exportStockHistory")
	public String exportHistory(@RequestParam("stockName") String stockName, @RequestParam("year") int year,
			@RequestParam("field") String searchType, Model model) throws Exception {
		List<Headers> headers = getHeaders();
		List<StockHistory> histories = service.getHistory(stockName, year, searchType);
		model.addAttribute("msg",
				year + " Year " + searchType.toLowerCase() + " Stock History of " + stockName + " : ");
		model.addAttribute("headers", headers);
		model.addAttribute("histories", histories);
		return "stock";
	}

	private List<Headers> getHeaders() {
		List<Headers> headers = new ArrayList<>();
		headers.add(new Headers("Symbol", "Date", "High(price)", "Low(price)", "closed(price)"));
		return headers;
	}
}
package com.basant.spring.yahoo.stock.api.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class Headers {
	private String header1;
	private String header2;
	private String header3;
	private String header4;
	private String header5;
}
package com.basant.spring.yahoo.stock.api.dto;

import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class StockDto {
	private String name;
	private BigDecimal price;
	private BigDecimal change;
	private String currency;
	private BigDecimal bid;
	private BigDecimal priceHint;
	private String stockName;
}
package com.basant.spring.yahoo.stock.api.dto;

import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class StockHistory {
	private String symbol;
	private String date;
	private BigDecimal high;
	private BigDecimal low;
	private BigDecimal close;
}
package com.basant.spring.yahoo.stock.api.service;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.springframework.stereotype.Service;

import com.basant.spring.yahoo.stock.api.dto.StockDto;
import com.basant.spring.yahoo.stock.api.dto.StockHistory;

import yahoofinance.Stock;
import yahoofinance.YahooFinance;
import yahoofinance.histquotes.HistoricalQuote;
import yahoofinance.histquotes.Interval;

@Service
public class StockService {

	public StockDto getStockInfo(String stockName) throws Exception {
		Stock stock = YahooFinance.get(stockName.toUpperCase(), true);
		return new StockDto(stock.getName(), stock.getQuote().getPrice(), stock.getQuote().getChange(),
				stock.getCurrency(), stock.getQuote().getBid(), stock.getQuote().getChangeFromYearHighInPercent(),
				stockName.toUpperCase());
	}

	public List<StockHistory> getHistory(String stockName, int year, String searchType) throws Exception {
		List<StockHistory> histories = new ArrayList<>();
		Stock stock = null;
		List<HistoricalQuote> quotes = null;
		if ((searchType == null || searchType.length() <= 1) && (year == 0)) {
			stock = YahooFinance.get(stockName, true);
		} else {
			Calendar from = Calendar.getInstance();
			Calendar to = Calendar.getInstance();
			from.add(Calendar.YEAR, Integer.valueOf("-" + year));
			stock = YahooFinance.get(stockName);
			quotes = stock.getHistory(from, to, getInterval(searchType));
		}

		quotes = stock.getHistory();
		for (HistoricalQuote quote : quotes) {
			histories.add(new StockHistory(quote.getSymbol(), convertor(quote.getDate()), quote.getHigh(),
					quote.getLow(), quote.getClose()));

		}
		return histories;
	}

	private String convertor(Calendar cal) {
		cal.add(Calendar.DATE, 1);
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		String formatted = format1.format(cal.getTime());
		return formatted;
	}

	private Interval getInterval(String searchType) {
		Interval interval = null;
		switch (searchType) {
		case "DAILY":
			interval = Interval.DAILY;
			break;
		case "WEEKLY":
			interval = Interval.WEEKLY;
			break;
		case "MONTHLY":
			interval = Interval.MONTHLY;
			break;

		}
		return interval;
	}

	public Stock getStock(String stockName) throws IOException {
		return YahooFinance.get(stockName.toUpperCase(), true);
	}
}
package com.basant.spring.yahoo.stock.api;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

@SuppressWarnings("deprecation")
@SpringBootApplication
public class YahooStockServiceApplication extends WebMvcConfigurerAdapter {

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/home").setViewName("stock");
	}

	public static void main(String[] args) {
		SpringApplication.run(YahooStockServiceApplication.class, args);
	}
}
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
<title>Home</title>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" />
<script
	src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script
	src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script
	src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
</head>
<body>

	<div class="container">
		<!-- Button to Open the Modal -->
		<div align="center">
			<br /> <br />
			<button type="button" class="btn btn-primary" data-toggle="modal"
				data-target="#myModal">Find Stock</button>
		</div>

		<div align="center">
			<br /> <br />
			<button type="button" class="btn btn-primary" data-toggle="modal"
				data-target="#myModal1">Export Stock History</button>
		</div>

		<!-- The Modal -->
		<div class="modal fade" id="myModal">
			<div class="modal-dialog">
				<div class="modal-content">

					<!-- Modal Header -->
					<div class="modal-header">
						<h4 class="modal-title">Get Current stock information</h4>
						<button type="button" class="close" data-dismiss="modal">&times;</button>
					</div>

					<!-- Modal body -->
					<div class="modal-body">
						<form class="form-inline" action="/getStock">
							<div class="form-group">
								<input type="text" class="form-control"
									placeholder="Enter Stock Name" name="stockName"
									required="required" />
								<button type="submit" class="btn btn-primary">Search</button>
							</div>
						</form>
					</div>
					<!-- Modal footer -->
					<div class="modal-footer">
						<button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
					</div>

				</div>
			</div>
		</div>




		<!-- The Modal -->
		<div class="modal fade" id="myModal1">
			<div class="modal-dialog">
				<div class="modal-content">

					<!-- Modal Header -->
					<div class="modal-header">
						<h4 class="modal-title">Export Stock History</h4>
						<button type="button" class="close" data-dismiss="modal">&times;</button>
					</div>

					<!-- Modal body -->
					<div class="modal-body">
						<form class="form-inline" action="/exportStockHistory">

							<div class="form-group">
								<table>
									<tr>
										<td>Search Type :</td>
										<td><select name="field" class="form-control"
											style="width: 205px;">
												<option value="Other">Select</option>
												<option value="DAILY">Daily</option>
												<option value="WEEKLY">Weekly</option>
												<option value="MONTHLY">Monthly</option>
										</select></td>
									</tr>
									<tr>
										<td>Stock Name :</td>
										<td><input type="text" class="form-control"
											placeholder="Enter Stock Name" name="stockName"
											required="required" /></td>
									</tr>
									<tr>
										<td>No Of Year :</td>
										<td><input type="text" class="form-control"
											placeholder="Year" name="year" /></td>
									</tr>
									<tr>
										<td>.</td>
										<td></td>
									</tr>

									<tr>
										<td></td>
										<td align="center">
											<button type="submit" class="btn btn-info">Search</button>
										</td>
									</tr>
								</table>

							</div>
						</form>
					</div>
					<!-- Modal footer -->
					<div class="modal-footer">
						<button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
					</div>

				</div>
			</div>
		</div>

	</div>
	<div class="container">
		<h2>Stock Details</h2>
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Name</th>
					<th>Price</th>
					<th>Change</th>
					<th>Currency</th>
					<th>Bid</th>
					<th>priceHint</th>
					<th>History</th>
				</tr>
			</thead>
			<tbody>
				<tr th:each="stockDto : ${stockList}">
					<td th:text="${stockDto.name}"></td>
					<td th:text="${stockDto.price}"></td>
					<td th:text="${stockDto.change}"></td>
					<td th:text="${stockDto.currency}"></td>
					<td th:text="${stockDto.bid}"></td>
					<td th:text="${stockDto.priceHint}"></td>
					<td><a th:href="@{/getHistory/}+${stockDto.stockName}"
						type="button" class="btn btn-success">History</a></td>
				</tr>

			</tbody>
		</table>
	</div>

	<div class="container">
		<h2 th:text="${msg}"></h2>
		<div class="table-responsive">
			<table class="table">
				<thead>
					<tr th:each="header : ${headers}">
						<th th:text="${header.header1}"></th>
						<th th:text="${header.header2}"></th>
						<th th:text="${header.header3}"></th>
						<th th:text="${header.header4}"></th>
						<th th:text="${header.header5}"></th>

					</tr>
				</thead>
				<tbody>
					<tr th:each="history : ${histories}">
						<td th:text="${history.symbol}"></td>
						<td th:text="${history.date}"></td>
						<td th:text="${history.high}"></td>
						<td th:text="${history.low}"></td>
							<td th:text="${history.close}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
spring.application.name=YahooStock
spring.data.mongodb.uri=mongodb://localhost:27017/yahoo_stock
